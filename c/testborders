/*******************************************************************
 * File:     testborder
 * Purpose:  Testing that the border routine works
 * Author:   Justin Fletcher
 * Date:     08 Nov 2002
 ******************************************************************/

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "borders.h"
#include "swis.h"

#define X0 128
#define Y0 128
#define HEIGHT 96
#define WIDTH  128

/* Standard heights of the icons for different border types */
int heights[] = {
    40,     // regular icon
    52,     // raised (not recommended)
    52,     // lowered (informationals)
    52,     // ridge (group, not recommended)
    52,     // channel (group)
    52,     // action (pressable button)
    52+16,  // default (pressable button)
    52+16,  // writeable
};

/* Dithering flags */
int dither = DITHER_BACKGROUND;

int main(int argc, char *argv[])
{
  int i;
  int alt;
  int wait_at_end = 1;

  if (argc == 2 && strcmp(argv[1], "-quit")==0)
    wait_at_end = 0;

  printf("Plotting...\n");

  /* We draw each of the buttons, going up the screen, and beside them
     we draw button with the 'selected' bit set, forcing the button to
     be pressed. The only buttons this has an effect for should be types
     5 and 6 (action and default). */

  for (alt=0; alt<2; alt++)
  {
    for (i=1; i<=7; i++)
    {
      /* We set up the environment that the Wimp would give us */
      colours_t cols[6];
      bbox_t fillbox;
      bbox_t box;
      cols[COLOUR_FG]  =0x00000000;
      cols[COLOUR_BG]  =(i==7) ? 0xFFFFFF00 : 0xDDDDDD00;
      cols[COLOUR_WELL]=(i==6) ? 0xBAEEEE00 : 0xDDDDDD00;
      cols[COLOUR_FACE]=0xFFFFFF00;
      cols[COLOUR_OPP] =(i==3 || i==4) ? 0xBABABA00 : 0x73737300;
      box.x0=X0 + alt*(WIDTH+32);
      box.y0=Y0+(HEIGHT)*(i-1);
      box.x1=box.x0+WIDTH;
      box.y1=box.y0+heights[i];
      box.dx=2;
      box.dy=2;
      box.dx_1=box.dx-1;
      box.dy_1=box.dy-1;

      fillbox=box;

      /* Grey background to see our buttons against */
      _swix(ColourTrans_SetGCOL,_IN(0)|_INR(3,4),0xDDDDDD00,0,0);
      _swix(OS_Plot,_INR(0,2),4,   box.x0-16,box.y0-16);
      _swix(OS_Plot,_INR(0,2),96+5,box.x1+16,box.y1+16);

      border_colour(i, alt==1 ? (1<<21) : 0, &fillbox, cols, 0xDDDDDD00);
      _swix(ColourTrans_SetGCOL,_IN(0)|_INR(3,4),
                    cols[COLOUR_BG],
                    (1<<7) | ((dither & DITHER_BACKGROUND) ? (1<<8) : 0),
                    0);
      border_fill(i, alt==1 ? (1<<21) : 0, &fillbox, cols, dither);
      border_draw(i, alt==1 ? (1<<21) : 0, &box, cols, dither);
    }
  }

  if (wait_at_end)
    getc(stdin);

  return 0;
}
